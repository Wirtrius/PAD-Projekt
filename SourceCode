#include <WiFi.h>
#include <WebServer.h>
#include <ESP32Firebase.h>

const char* ssid = "KupSiData";
const char* password = "kupujdata";

WebServer server(80);
Firebase firebase("https://esp32-v1-d9386-default-rtdb.europe-west1.firebasedatabase.app/");

// Piny pro připojení Trig a Echo z modulu pro jednotlivé osy
int pTrigX1 = 25; // První sensor pro osu X
int pEchoX1 = 27;
int pTrigX2 = 22; // Druhý sensor pro osu X
int pEchoX2 = 21;
int pTrigY = 32;
int pEchoY = 14;
int pTrigZ = 26;
int pEchoZ = 35;

// Inicializace proměnných pro jednotlivé osy, do kterých se uloží data
long odezvaX1, vzdalenostX1;
long odezvaX2, vzdalenostX2;
long odezvaY, vzdalenostY;
long odezvaZ, vzdalenostZ;

int boundX, boundY, boundZ;

void setup() {
  Serial.begin(115200);
  // Nastavení pinů modulu jako výstup a vstup pro jednotlivé osy
  pinMode(pTrigX1, OUTPUT);
  pinMode(pEchoX1, INPUT);
  pinMode(pTrigX2, OUTPUT);
  pinMode(pEchoX2, INPUT);
  pinMode(pTrigY, OUTPUT);
  pinMode(pEchoY, INPUT);
  pinMode(pTrigZ, OUTPUT);
  pinMode(pEchoZ, INPUT);

   // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to WiFi");

// Print ESP32 IP address
    Serial.print("ESP32 IP Address: ");
    Serial.println(WiFi.localIP());

  // Set the bounds for measurements
  boundX = 50; // Bound for X axis (in cm)
  boundY = 30; // Bound for Y axis (in cm)
  boundZ = 20; // Bound for Z axis (in cm)
}

void loop() {
  /*float prumerX = mernaVzdalenostX();
  float vzdalenostY = mernaVzdalenostY();
  float vzdalenostZ = mernaVzdalenostZ();*/

  float prumerX = mernaVzdalenostSim(pTrigX1, pEchoX1, pTrigX2, pEchoX2) / 58.31;
  float vzdalenostY = mernaVzdalenostSim(pTrigY, pEchoY) / 58.31;
  float vzdalenostZ = mernaVzdalenostSim(pTrigZ, pEchoZ) / 58.31;
  
  // Calculate the size of the inserted item based on the differences between the measured distances and the bounds
  float sizeX = boundX - prumerX;
  float sizeY = boundY - vzdalenostY;
  float sizeZ = boundZ - vzdalenostZ;

  // Výpis velikosti vloženého předmětu
  Serial.print("Velikost(cm): ");
   Serial.print(sizeX);
   Serial.print("x");
   Serial.print(sizeY);
   Serial.print("x");
   Serial.println(sizeY);

  zasliFirebase(sizeX, sizeY, sizeZ);
  // Pauza 0.5 s pro přehledné čtení
  delay(10000);
}

float mernaVzdalenostX() {
  odezvaX1 = mereniVzdalenosti(pTrigX1, pEchoX1);
  vzdalenostX1 = odezvaX1 / 58.31;

  odezvaX2 = mereniVzdalenosti(pTrigX2, pEchoX2);
  vzdalenostX2 = odezvaX2 / 58.31;

  return (vzdalenostX1 + vzdalenostX2) / 2.0;
}

float mernaVzdalenostY() {
  odezvaY = mereniVzdalenosti(pTrigY, pEchoY);
  return odezvaY / 58.31;
}

float mernaVzdalenostZ() {
  odezvaZ = mereniVzdalenosti(pTrigZ, pEchoZ);
  return odezvaZ / 58.31;
}

long mereniVzdalenosti(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(trigPin, LOW);
  return pulseIn(echoPin, HIGH);
}
float mernaVzdalenostSim(int trigPin, int echoPin) {
  // Simulace měření vzdálenosti s náhodnými hodnotami
  return random(10, 100) * 58.31; // Simulace náhodné vzdálenosti v rozmezí 10 až 100 cm
}
float mernaVzdalenostSim(int trigPin1, int echoPin1, int trigPin2, int echoPin2) {
  // Simulace měření vzdálenosti s náhodnými hodnotami
  float vzdalenost1 = random(10, 100) * 58.31; // Simulace náhodné vzdálenosti v rozmezí 10 až 100 cm pro první senzor
  float vzdalenost2 = random(10, 100) * 58.31; // Simulace náhodné vzdálenosti v rozmezí 10 až 100 cm pro druhý senzor
  return (vzdalenost1 + vzdalenost2) / 2.0; // Vrátíme průměr ze dvou simulovaných hodnot
}
void zasliFirebase(float sizeX, float sizeY, float sizeZ){
// Generate a random ID
  String randomID = "";
  const char alphanum[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  for (int i = 0; i < 8; ++i) {
    randomID += alphanum[random(0, sizeof(alphanum) - 1)];
  }

  // Get the current timestamp
  unsigned long timestamp = millis(); // You can use millis() or any other time source as per your requirement

  String timestampStr = String(timestamp);

  // Send data to Firebase under the randomly generated ID
  firebase.setFloat("/measurements/" + randomID + "/sizeX", sizeX);
  firebase.setFloat("/measurements/" + randomID + "/sizeY", sizeY);
  firebase.setFloat("/measurements/" + randomID + "/sizeZ", sizeZ);
  firebase.setString("/measurements/" + randomID + "/timestamp", timestampStr);
}
